[{"C:\\Dateien\\FullStack\\fullStackOpen\\part2\\phonebook\\src\\index.js":"1","C:\\Dateien\\FullStack\\fullStackOpen\\part2\\phonebook\\src\\App.js":"2","C:\\Dateien\\FullStack\\fullStackOpen\\part2\\phonebook\\src\\services\\persons.js":"3"},{"size":242,"mtime":1691742647194,"results":"4","hashOfConfig":"5"},{"size":4459,"mtime":1692172627436,"results":"6","hashOfConfig":"5"},{"size":1041,"mtime":1692179512433,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1njflk6",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\Dateien\\FullStack\\fullStackOpen\\part2\\phonebook\\src\\index.js",[],[],"C:\\Dateien\\FullStack\\fullStackOpen\\part2\\phonebook\\src\\App.js",["19","20","21","22","23"],[],"import { useState, useEffect, Button } from 'react'\r\nimport axios from 'axios'\r\nimport personService from './services/persons'\r\nimport './index.css'\r\n\r\nconst Notification = ({message}) => {\r\n  if (message == null) return null\r\n  return (\r\n    <div className='notification'>\r\n        {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ErrorNotification = ({message}) => {\r\n  if (message == null) return null\r\n  return (\r\n    <div className='errorNotification'>\r\n        {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst SearchFilter = ({filterVal, setNewFilter}) => (\r\n  <div>\r\n    filter shown with <input value={filterVal} onChange={e => setNewFilter(e.target.value)}/>\r\n  </div>\r\n)\r\n\r\nconst PersonForm = ({actionAdd, name, setName, number, setNumber}) => (\r\n  <form onSubmit={actionAdd}>\r\n    <div>\r\n      name: <input value={name} onChange={e => setName(e.target.value)}/>\r\n    </div>\r\n    <div>\r\n      number: <input value={number} onChange={e => setNumber(e.target.value)}/>\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n)\r\n\r\nconst Persons = ({persons, filterWord, setter}) => {\r\n  const newPersons = persons.filter(p => p.name.toUpperCase().startsWith(filterWord.toUpperCase()))\r\n\r\n  return (newPersons.map((person, i) => {\r\n    return (\r\n    <div key={i}>\r\n      {person.name} {person.number}\r\n      &nbsp;\r\n      <button onClick={() => personService.deleteElement(persons, i, setter)}>delete</button>\r\n    </div>\r\n    )\r\n  }))\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [filterParam, setFilterParam] = useState('')\r\n  const [message, setMessage] = useState()\r\n  const [errorMessage, setErrorMessage] = useState()\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    if (persons.filter(p => p.name === newName && p.number === newNumber).length != 0) {\r\n      alert(`${newName} is already added to phonebook`)\r\n    } else if (persons.filter(p => p.name === newName && p.number !== newNumber).length != 0) {\r\n        if (window.confirm(`${newName} is already added to phonebook. Replace the old number with new one?`)) {\r\n          const personToBeUpdated = persons.find(p => p.name === newName)\r\n          personService\r\n            .update(personToBeUpdated, newNumber)\r\n            .then(data => {\r\n              const newPersons = persons.map(p => p.id !== personToBeUpdated.id ? p : data)              \r\n              setPersons(newPersons)\r\n              setNewName('')\r\n              setNewNumber('')              \r\n              setMessage(`Number of ${personToBeUpdated.name} was updated`)\r\n              setTimeout(() => {\r\n                setMessage(null)\r\n              }, 3000)\r\n            })\r\n            .catch(error => {\r\n              setErrorMessage(`${personToBeUpdated.name} has already been deleted from db`)\r\n              personService\r\n                .getAll()\r\n                .then(data => {\r\n                setPersons(data)\r\n              })\r\n              setTimeout(() => {\r\n                setErrorMessage(null)\r\n              }, 3000)\r\n            })\r\n        }          \r\n    } else {\r\n      const personObj = {name: newName, number: newNumber}\r\n      personService\r\n        .create(personObj)\r\n        .then(data => {\r\n          setPersons(persons.concat(data))\r\n          setNewName('')\r\n          setNewNumber('')\r\n          setMessage(`${personObj.name} was added to the phonebook`)\r\n          setTimeout(() => {\r\n            setMessage(null)\r\n          }, 3000)\r\n        })\r\n        .catch(error => {\r\n          setErrorMessage(error.response.data.error)\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 3000)\r\n        })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n      personService\r\n        .getAll()\r\n        .then(data => {\r\n          setPersons(persons.concat(data))\r\n        })\r\n    }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n\r\n      <Notification message={message} />\r\n\r\n      <ErrorNotification message={errorMessage} />\r\n\r\n      <SearchFilter setNewFilter={setFilterParam} />\r\n\r\n      <h2>Add a new</h2>\r\n\r\n      <PersonForm actionAdd={addName} name={newName} setName={setNewName} number={newNumber}\r\n                  setNumber={setNewNumber} />\r\n\r\n      <h2>Numbers</h2>\r\n\r\n      <Persons persons={persons} filterWord={filterParam} setter={setPersons}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","C:\\Dateien\\FullStack\\fullStackOpen\\part2\\phonebook\\src\\services\\persons.js",["24","25"],[],"import axios from 'axios'\r\n\r\n// const baseUrl = 'http://localhost:3001/api/persons'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n    \r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteElement = (persons, index, setter) => {\r\n    if (window.confirm(`Do you want to delete ${persons[index].name}?`)) {\r\n        const url = `${baseUrl}/${persons[index].id}`\r\n        axios.delete(url)\r\n        const newPersons = persons.filter(person => person.id != persons[index].id)\r\n        setter(newPersons)\r\n    }\r\n}\r\n\r\nconst update = (person, newNumber) => {\r\n    const url = `${baseUrl}/${person.id}`\r\n    const newPerson = {...person, number: newNumber}\r\n    const request = axios.put(url, newPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    deleteElement,\r\n    update\r\n}",{"ruleId":"26","severity":1,"message":"27","line":1,"column":31,"nodeType":"28","messageId":"29","endLine":1,"endColumn":37},{"ruleId":"26","severity":1,"message":"30","line":2,"column":8,"nodeType":"28","messageId":"29","endLine":2,"endColumn":13},{"ruleId":"31","severity":1,"message":"32","line":68,"column":82,"nodeType":"33","messageId":"34","endLine":68,"endColumn":84},{"ruleId":"31","severity":1,"message":"32","line":70,"column":89,"nodeType":"33","messageId":"34","endLine":70,"endColumn":91},{"ruleId":"35","severity":1,"message":"36","line":125,"column":8,"nodeType":"37","endLine":125,"endColumn":10,"suggestions":"38"},{"ruleId":"31","severity":1,"message":"32","line":21,"column":63,"nodeType":"33","messageId":"34","endLine":21,"endColumn":65},{"ruleId":"39","severity":1,"message":"40","line":33,"column":1,"nodeType":"41","endLine":38,"endColumn":2},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'persons'. Either include it or remove the dependency array. You can also do a functional update 'setPersons(p => ...)' if you only need 'persons' in the 'setPersons' call.","ArrayExpression",["42"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"43","fix":"44"},"Update the dependencies array to be: [persons]",{"range":"45","text":"46"},[3929,3931],"[persons]"]